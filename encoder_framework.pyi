from typing import Union, Optional, Tuple, ClassVar
from typing import TYPE_CHECKING


if TYPE_CHECKING:
    import lvgl as lv  # NOQA
    import display_driver_framework


class EncoderDriver:
    _instance_counter: ClassVar[int] = ...
    id: int = ...
    _disp_drv: display_driver_framework.DisplayDriver = ...
    _last_enc_value: int = ...
    _last_enc_diff: int = ...
    _last_key: int = ...
    _current_state: int = ...
    _indev_drv: lv.indev_t = ...

    def __init__(self):
        ...

    def _get_enc(
        self
    ) -> Optional[Union[Tuple[int, int], Tuple[None, int], Tuple[int, None]]]:
        """
        Reads the encoder position and any buttons that may exist

        This function needs to return the encoder value and the key value.
        If either of those is not being used then you can return None for
        that item.
        If both items are not being used then return a single None

        :return: None if there is no button press and there is no encoder value

        :raises: NotImplimentedError if the method is not overridden
                 in the encoder driver
        """
        ...

    def _read(self, drv, data) -> bool:  # NOQA
        ...

    def get_type(self) -> int:
        ...

    def read(self) -> None:
        ...

    def send_event(self, code, param):
        ...

    def remove_event(self, index):
       ...

    def get_event_dsc(self, index):
        ...

    def get_event_count(self):
        ...

    def add_event_cb(self, event_cb, filter, user_data):
        ...

    def search_obj(self, point):
        ...

    def delete_read_timer(self):
        ...

    def get_read_timer(self):
        ...

    def get_active_obj(self):
        ...

    def wait_release(self):
        ...

    def get_vect(self, point):
        ...

    def get_scroll_obj(self):
        ...

    def get_scroll_dir(self):
        ...

    def get_gesture_dir(self):
        ...

    def get_point(self, point):
        ...

    def get_state(self):
        ...

    def enable(self, en):
        ...

    def get_group(self):
        ...

    def set_group(self, group):
        ...

    def set_cursor(self, cur_obj):
        ...

    def reset_long_press(self):
        ...

    def reset(self, obj):
        ...

    def get_disp(self):
        ...

    @staticmethod
    def active():
        ...
